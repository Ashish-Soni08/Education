# version: "3.9"    # Docker Compose Version
# POSTGRES SQL DATABASE
services:
  postgres:
    container_name: "postgres"    
    image: postgres:latest
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PW}
      - POSTGRES_DB=${POSTGRES_DB}
    ports:
      - "5432:5432"
    restart: always
    volumes:
      - "./01_databases/postgres:/var/lib/postgresql/data:rw"
# PGADMIN GUI      
  pgadmin:
    container_name: "pgadmin"
    image: dpage/pgadmin4:latest
    environment:
      - PGADMIN_DEFAULT_EMAIL=${PGADMIN_MAIL}
      - PGADMIN_DEFAULT_PASSWORD=${PGADMIN_PW}
    ports:
      - "5050:80"
    depends_on:
      - postgres
    restart: always
    volumes:
      - ./01_databases/pgadmin:/var/lib/pgadmin
# PGVECTOR
  pgvector:
    container_name: "pgvector"
    image: ankane/pgvector:latest
    depends_on:
      - postgres
    ports:
      - "9200:9200"
    environment:
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT=5432
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PW}
      - POSTGRES_DB=${POSTGRES_DB}
    restart: always
    volumes:
      - ./01_databases/pgvector:/var/lib/pgvector

# WEAVIATE
#   weaviate:
#     container_name: "weaviate"
#     command:
#     - --host
#     - 0.0.0.0
#     - --port
#     - '8081'
#     - --scheme
#     - http
#     image: semitechnologies/weaviate:1.17.1
#     ports:
#     - 8081:8081
#     restart: on-failure:0
#     environment:
#       QUERY_DEFAULTS_LIMIT: 25
#       AUTHENTICATION_ANONYMOUS_ACCESS_ENABLED: 'true'
#       PERSISTENCE_DATA_PATH: '/var/lib/weaviate'
#       DEFAULT_VECTORIZER_MODULE: 'none'
#       ENABLE_MODULES: ''
#       CLUSTER_HOSTNAME: 'node1'
#     volumes:
#       - ./01_databases/weaviate:/var/lib/weaviate
# QDRANT
  # qdrant:
  #     image: qdrant/qdrant
  #     container_name: "qdrant"
  #     restart: always
  #     ports:
  #       - "6333:6333"
  #     volumes:
  #       - ./01_databases/qdrant:/qdrant/storage
# MILVUS
  # etcd:
  #   container_name: milvus-etcd
  #   image: quay.io/coreos/etcd:v3.5.0
  #   environment:
  #     - ETCD_AUTO_COMPACTION_MODE=revision
  #     - ETCD_AUTO_COMPACTION_RETENTION=1000
  #     - ETCD_QUOTA_BACKEND_BYTES=4294967296
  #     - ETCD_SNAPSHOT_COUNT=50000
  #   volumes:
  #     - ${DOCKER_VOLUME_DIRECTORY:-.}/volumes/etcd:/etcd
  #   command: etcd -advertise-client-urls=http://127.0.0.1:2379 -listen-client-urls http://0.0.0.0:2379 --data-dir /etcd

  # minio:
  #   container_name: milvus-minio
  #   image: minio/minio:RELEASE.2022-03-17T06-34-49Z
  #   environment:
  #     MINIO_ACCESS_KEY: minioadmin
  #     MINIO_SECRET_KEY: minioadmin
  #   ports:
  #     - "9001:9001"
  #   volumes:
  #     - ${DOCKER_VOLUME_DIRECTORY:-.}/volumes/minio:/minio_data
  #   command: minio server /minio_data --console-address ":9001"
  #   healthcheck:
  #     test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
  #     interval: 30s
  #     timeout: 20s
  #     retries: 3

  # standalone:
  #   container_name: milvus-standalone
  #   image: milvusdb/milvus:v2.2.2
  #   command: ["milvus", "run", "standalone"]
  #   environment:
  #     ETCD_ENDPOINTS: etcd:2379
  #     MINIO_ADDRESS: minio:9000
  #   volumes:
  #     - ${DOCKER_VOLUME_DIRECTORY:-.}/volumes/milvus:/var/lib/milvus
  #   ports:
  #     - "19530:19530"
  #     - "9091:9091"
  #   depends_on:
  #     - "etcd"
  #     - "minio"
# AIRFLOW
  # airflow:
  #   container_name: "airflow"
  #   image: puckel/docker-airflow:latest
  #   depends_on:
  #     - postgres # dont start until postgres service starts
  #   environment:
  #     - LOAD_EX=n
  #     - EXECUTOR=Local # Execute everything locally instead of using a Celery Executor
  #     - POSTGRES_USER=${POSTGRES_USER}
  #     - POSTGRES_PASSWORD=${POSTGRES_PW}
  #     - POSTGRES_DB=${POSTGRES_DB}
  #   ports:
  #     - "8080:8080" # To access the Airflow UI
  #   restart: always
  #   volumes:
  #     - ./02_workflow_ orchestration/airflow/dags:/usr/local/airflow/dags
  #     - ./02_workflow_ orchestration/airflow/plugins:/usr/local/airflow/plugins
  #   command: webserver